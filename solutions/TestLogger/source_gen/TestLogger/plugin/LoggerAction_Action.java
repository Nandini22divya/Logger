package TestLogger.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import javax.swing.JOptionPane;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import org.apache.log4j.BasicConfigurator;
import org.jetbrains.mps.openapi.model.SNodeChangeListener;
import org.jetbrains.mps.openapi.event.SPropertyChangeEvent;
import org.jetbrains.mps.openapi.event.SReferenceChangeEvent;
import org.jetbrains.mps.openapi.event.SNodeAddEvent;
import org.jetbrains.mps.openapi.event.SNodeRemoveEvent;
import org.jetbrains.mps.openapi.model.SModelListener;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SRepository;

public class LoggerAction_Action extends BaseAction {
  private static final Logger LOG = LogManager.getLogger(LoggerAction_Action.class);
  private static final Icon ICON = null;

  public LoggerAction_Action() {
    super("Logger", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.UNDO_PROJECT);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      EditorContext p = event.getData(MPSEditorDataKeys.EDITOR_CONTEXT);
      if (p == null) {
        return false;
      }
    }
    {
      List<SNode> nodes = event.getData(MPSCommonDataKeys.NODES);
      if (nodes == null) {
        return false;
      }
      if (nodes.isEmpty()) {
        return false;
      }

    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    JOptionPane.showMessageDialog(null, "Welcome");
    LoggingRuntime.logMsgView(Level.INFO, "Welcome to the logger to view logs", LoggerAction_Action.class, null, event.getData(MPSEditorDataKeys.EDITOR_CONTEXT).getOperationContext().getProject());
    BasicConfigurator.configure();
    event.getData(MPSEditorDataKeys.EDITOR_CONTEXT).getModel().addChangeListener(new SNodeChangeListener() {
      @Override
      public void propertyChanged(@NotNull SPropertyChangeEvent p0) {
      }

      @Override
      public void referenceChanged(@NotNull SReferenceChangeEvent p0) {
        LoggingRuntime.logMsgView(Level.INFO, "reference Changed", LoggerAction_Action.class, null, null);
      }

      @Override
      public void nodeAdded(@NotNull SNodeAddEvent p0) {
        LoggingRuntime.logMsgView(Level.INFO, "Node added", LoggerAction_Action.class, null, null);

      }

      @Override
      public void nodeRemoved(@NotNull SNodeRemoveEvent p0) {
        LoggingRuntime.logMsgView(Level.INFO, "Node" + p0.getParent().getName() + "removed", LoggerAction_Action.class, null, null);
      }
    });

    event.getData(MPSEditorDataKeys.EDITOR_CONTEXT).getModel().addModelListener(new SModelListener() {
      @Override
      public void modelLoaded(SModel p0, boolean p1) {
        LoggingRuntime.logMsgView(Level.INFO, "Model loaded", LoggerAction_Action.class, null, null);
      }

      @Override
      public void modelReplaced(SModel p0) {
      }

      @Override
      public void modelUnloaded(SModel p0) {
      }

      @Override
      public void modelSaved(SModel p0) {
        LoggingRuntime.logMsgView(Level.INFO, "Model saved", LoggerAction_Action.class, null, null);
      }

      @Override
      public void modelAttached(SModel p0, SRepository p1) {
        LoggingRuntime.logMsgView(Level.INFO, "Model created", LoggerAction_Action.class, null, null);
      }

      @Override
      public void modelDetached(SModel p0, SRepository p1) {
        LoggingRuntime.logMsgView(Level.INFO, "Model removed", LoggerAction_Action.class, null, null);
      }

      @Override
      public void conflictDetected(SModel p0) {
      }

      @Override
      public void problemsDetected(SModel p0, Iterable<SModel.Problem> p1) {
      }
    });
  }
}
